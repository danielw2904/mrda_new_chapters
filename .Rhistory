library(plotly)
beta_0 <- seq(0, 2, length.out = 100)
beta_1 <- seq(-0.4, -0.2, length.out = 100)
opts <- expand.grid(beta_0, beta_1)
opts$loglik <- apply(opts, 1, function(x) mlEstimate(x[1], x[2]))
library(knitr)
options(digits = 3)
opts_chunk$set(tidy.opts=list(width.cutoff=75),tidy=FALSE, rownames.print = FALSE, rows.print = 10, echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(gridExtra)
set.seed(1776) # AMERICA THE BEAUTIFUL
beta.true <- as.matrix(c(0.6))
N <- 100
K <- nrow(beta.true)
X <- matrix(runif(K * N, -8, 8), ncol = K)
probs <- 1/(1 + exp(-X %*% beta.true))
Y <- rbinom(n = N, size = 1, prob = probs)
lin.mod <- lm(Y ~ X)$coefficients
lin.mod.pred <- cbind(1,X) %*% lin.mod
ggplot(data = data.frame(Y = Y, X = X), aes(x = X, y = Y)) +
geom_point() +
theme_bw()
plot.bad <- ggplot(data = as.data.frame(cbind(Y, X)), aes(x = X, y = Y)) +
geom_point() +
geom_line(data = data.frame(pred = lin.mod.pred[order(X)], X = X[order(X)]), aes(y = pred), lwd = 1.01, color = "firebrick") +
theme_bw() +
ylim(-0.2, 1.2)
plot.cor <- ggplot(data = as.data.frame(cbind(Y, X)), aes(x = X, y = Y)) +
geom_point() +
geom_line(data = data.frame(probs = probs[order(X)], X = X[order(X)]), aes(y = probs), lwd = 1.01, color = "firebrick") +
theme_bw() +
ylim(-0.2, 1.2) +
theme(axis.title.y = element_blank())
grid.arrange(plot.bad, plot.cor, ncol = 2)
library(latex2exp)
x <- seq(-10, 10, length.out = 1000)
fx <- 1/(1+exp(-x))
df <- data.frame(x = x, fx = fx)
ggplot(df, aes(x = x, y = fx)) +
geom_line()+
labs(y = TeX("$\\frac{1}{1+e^{-\\mathbf{X}}}$"), x = TeX("$\\mathbf{X}$"))+
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
theme_bw()
library(Ecdat)
data("Fair") # needs library(Ecdat)
head(Fair)
# Recoding number of affairs to binary variable
Fair$nbaffairs[Fair$nbaffairs > 0] <- 1
my_logit <- glm(nbaffairs ~ sex + age + religious + rate + ym + education, data = Fair, family = binomial(link = "logit"))
summary(my_logit)
library(mfx)
# Average partial effect
logitmfx(my_logit, data = Fair, atmean = FALSE)
# Take "religious" out. Compare AIC to full model!
my_logit2 <- glm(nbaffairs ~ sex + age + rate + ym + education, data = Fair, family = binomial(link = "logit"))
summary(my_logit2)
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <- length(LogModel$fitted.values)
R.l <-  1 -  dev / nullDev
R.cs <- 1- exp ( -(nullDev - dev) / modelN)
R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression\n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2           ", round(R.n, 3),    "\n")
}
logisticPseudoR2s(my_logit)
# Prediction for one observation
predict(my_logit, newdata = data.frame(sex = "male", age = 30, ym = 2, religious = 2, education = 16, rate = 4), type = "response")
Y <- c(0,0,0,0,1,1,1,1)
X <- cbind(c(-1,-2,-3,-3,5,6,10,11),c(3,2,-1,-1,2,4,1,0))
# Perfect prediction with regular logit
summary(glm(Y~X, family=binomial(link="logit")))
library(logistf)
# Perfect prediction with penalized-likelihood logit
summary(logistf(Y~X))
set.seed(123)
ratingGenre <- sample(1:10, size = 10000, replace = TRUE)
linModel <- 1 - 0.3 * ratingGenre
pSkip <- 1/(1+exp(-linModel))
skipped <- 1:length(pSkip)
for(i in 1:length(pSkip)){
skipped[i] <- sample(c(1, 0), size = 1, prob = c(pSkip[i], 1-pSkip[i]))
}
freq <- prop.table(table(data.frame(skipped = skipped, rating = ratingGenre)), margin = 2) * 100
freq <- as.data.frame(freq)
colnames(freq) <- c("Skipped", "rating", "Freq")
freq$Skipped <- factor(freq$Skipped, levels = c(0,1), labels = c("No", "Yes"))
ggplot(data = freq, aes(x = rating, y = Freq, fill = Skipped)) +
geom_col() +
ylab("Percent") +
xlab("Genre rating") +
theme_bw()
mlEstimate <- function(beta_0, beta_1){
pred <- 1/(1+exp(-(beta_0 + beta_1 * ratingGenre)))
loglik <- skipped * log(pred) + (1-skipped) * log(1 - pred)
sum(loglik)
}
library(plotly)
beta_0 <- seq(0, 2, length.out = 100)
beta_1 <- seq(-0.4, -0.2, length.out = 100)
opts <- expand.grid(beta_0, beta_1)
opts$loglik <- apply(opts, 1, function(x) mlEstimate(x[1], x[2]))
z <- matrix(opts$loglik, ncol = length(beta_0), byrow = TRUE)
plot_ly(x =beta_1, y = beta_0, z = z) %>%
add_surface() %>%
layout(scene = list(
xaxis = list(title = "beta_1"),
yaxis = list(title = "beta_0"),
zaxis = list(title = "Log likelihood")
))
install.packages("plotly")
reqPackages <- c("multcomp", "lm.beta", "pastecs", "cowplot", "stringr", "gtrendsR", "gridExtra", "car", "jsonlite", "PMCMR", "plotly", "Ecdat", "knitr", "dplyr", "kableExtra", "reshape2", "haven", "readxl", "Hmisc", "pwr", "ggplot2", "grid", "psych", "lubridate", "ggExtra", "mfx", "ggthemes", "logistf", "bookdown", "ggmap", "devtools", "latex2exp", "rvest", "plyr", "GPArotation")
reqPackages <- reqPackages[!reqPackages %in% installed.packages()]
lapply(reqPackages, install.packages)
reqPackages <- c("multcomp", "lm.beta", "pastecs", "cowplot", "stringr", "gtrendsR", "gridExtra", "car", "jsonlite", "PMCMR", "plotly", "Ecdat", "knitr", "dplyr", "kableExtra", "reshape2", "haven", "readxl", "Hmisc", "pwr", "ggplot2", "grid", "psych", "lubridate", "ggExtra", "mfx", "ggthemes", "logistf", "bookdown", "ggmap", "devtools", "latex2exp", "rvest", "plyr", "GPArotation")
reqPackages <- reqPackages[!reqPackages %in% installed.packages()]
#lapply(reqPackages, install.packages)
